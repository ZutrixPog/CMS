// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Author struct {
	ID          string `json:"id"`
	Name        string `json:"Name"`
	Description string `json:"Description"`
}

type NewAuthor struct {
	Name        string `json:"Name"`
	Description string `json:"Description"`
}

type NewPost struct {
	Title        string        `json:"Title"`
	Banner       string        `json:"Banner"`
	Author       string        `json:"Author"`
	Date         string        `json:"Date"`
	MarkdownFile string        `json:"Markdown_File"`
	Category     []*Categories `json:"Category"`
}

type Post struct {
	ID           string        `json:"id"`
	Title        string        `json:"Title"`
	Author       *Author       `json:"Author"`
	Banner       string        `json:"Banner"`
	Date         string        `json:"Date"`
	MarkdownText string        `json:"Markdown_text"`
	Category     []*Categories `json:"Category"`
	Views        int           `json:"views"`
	Likes        int           `json:"likes"`
}

type Categories string

const (
	CategoriesTech   Categories = "TECH"
	CategoriesCrypto Categories = "CRYPTO"
	CategoriesCs     Categories = "CS"
)

var AllCategories = []Categories{
	CategoriesTech,
	CategoriesCrypto,
	CategoriesCs,
}

func (e Categories) IsValid() bool {
	switch e {
	case CategoriesTech, CategoriesCrypto, CategoriesCs:
		return true
	}
	return false
}

func (e Categories) String() string {
	return string(e)
}

func (e *Categories) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Categories(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Categories", str)
	}
	return nil
}

func (e Categories) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
